name: CI

on:
  push:
    branches: [ main, server-state ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123456
          POSTGRES_DB: hontono_kuchikomi_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm install

    - name: Create database schema file
      working-directory: ./backend
      run: |
        echo "CREATE TABLE IF NOT EXISTS users (
          id UUID PRIMARY KEY,
          username VARCHAR(255) NOT NULL,
          email VARCHAR(255) NOT NULL,
          password VARCHAR(255) NOT NULL,
          role VARCHAR(50) NOT NULL DEFAULT 'user',
          \"isApproved\" BOOLEAN NOT NULL DEFAULT false,
          \"isSuperAdmin\" BOOLEAN DEFAULT false,
          \"submissionMethod\" VARCHAR(50) DEFAULT 'email',
          \"submissionContact\" VARCHAR(255) NOT NULL,
          icon VARCHAR(255) DEFAULT 'fas fa-user',
          \"approvedAt\" TIMESTAMP WITH TIME ZONE,
          \"approvedBy\" UUID,
          \"lastLoginAt\" TIMESTAMP WITH TIME ZONE,
          \"documentStatus\" VARCHAR(50) DEFAULT 'not_submitted',
          \"documentSubmittedAt\" TIMESTAMP WITH TIME ZONE,
          \"documentVerifiedAt\" TIMESTAMP WITH TIME ZONE,
          \"documentVerifiedBy\" UUID,
          \"documentRejectReason\" TEXT,
          \"documentPath\" VARCHAR(255),
          \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL,
          \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL
        );" > create_tables.sql
        
        echo "CREATE TABLE IF NOT EXISTS categories (
          id UUID PRIMARY KEY,
          name VARCHAR(255) NOT NULL,
          description TEXT,
          slug VARCHAR(255) NOT NULL,
          \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL,
          \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL
        );" >> create_tables.sql
        
        echo "CREATE TABLE IF NOT EXISTS threads (
          id UUID PRIMARY KEY,
          title VARCHAR(255) NOT NULL,
          \"categoryId\" UUID NOT NULL REFERENCES categories(id),
          \"authorId\" UUID REFERENCES users(id),
          \"shopUrl\" VARCHAR(255),
          \"shopDetails\" TEXT,
          \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL,
          \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL
        );" >> create_tables.sql
        
        echo "CREATE TABLE IF NOT EXISTS posts (
          id UUID PRIMARY KEY,
          content TEXT NOT NULL,
          \"threadId\" UUID NOT NULL REFERENCES threads(id),
          \"authorId\" UUID REFERENCES users(id),
          \"authorName\" VARCHAR(255) DEFAULT '名無しさん',
          \"helpfulCount\" INTEGER DEFAULT 0,
          \"postNumber\" INTEGER NOT NULL,
          \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL,
          \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL
        );" >> create_tables.sql

    - name: Setup database schema
      working-directory: ./backend
      run: |
        PGPASSWORD=postgres123456 psql -h localhost -U postgres -d hontono_kuchikomi_test -f create_tables.sql
      env:
        PGPASSWORD: postgres123456

    - name: Run database migrations
      working-directory: ./backend
      run: npx sequelize-cli db:migrate --migrations-path=./src/database/migrations
      env:
        DB_USER: postgres
        DB_PASSWORD: postgres123456
        DB_NAME: hontono_kuchikomi_test
        DB_HOST: localhost
        DB_PORT: 5432
        NODE_ENV: test

    - name: Run backend tests
      working-directory: ./backend
      run: npm test
      env:
        DB_USER: postgres
        DB_PASSWORD: postgres123456
        DB_NAME: hontono_kuchikomi_test
        DB_HOST: localhost
        DB_PORT: 5432
        NODE_ENV: test

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm install

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test 